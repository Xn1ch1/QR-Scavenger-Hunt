// Generated by view binder compiler. Do not edit!
package com.xn1ch1.qrscavengerhunt.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.xn1ch1.qrscavengerhunt.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SetClueRowBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView codeCheck;

  @NonNull
  public final TextView divide;

  @NonNull
  public final TextView number;

  @NonNull
  public final TextView text;

  @NonNull
  public final ImageView textCheck;

  private SetClueRowBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView codeCheck,
      @NonNull TextView divide, @NonNull TextView number, @NonNull TextView text,
      @NonNull ImageView textCheck) {
    this.rootView = rootView;
    this.codeCheck = codeCheck;
    this.divide = divide;
    this.number = number;
    this.text = text;
    this.textCheck = textCheck;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SetClueRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SetClueRowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.set_clue_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SetClueRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.codeCheck;
      ImageView codeCheck = rootView.findViewById(id);
      if (codeCheck == null) {
        break missingId;
      }

      id = R.id.divide;
      TextView divide = rootView.findViewById(id);
      if (divide == null) {
        break missingId;
      }

      id = R.id.number;
      TextView number = rootView.findViewById(id);
      if (number == null) {
        break missingId;
      }

      id = R.id.text;
      TextView text = rootView.findViewById(id);
      if (text == null) {
        break missingId;
      }

      id = R.id.textCheck;
      ImageView textCheck = rootView.findViewById(id);
      if (textCheck == null) {
        break missingId;
      }

      return new SetClueRowBinding((ConstraintLayout) rootView, codeCheck, divide, number, text,
          textCheck);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
