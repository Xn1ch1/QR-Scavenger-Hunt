// Generated by view binder compiler. Do not edit!
package com.xn1ch1.qrscavengerhunt.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.xn1ch1.qrscavengerhunt.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityHuntBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView huntClueBack;

  @NonNull
  public final TextView huntClueError;

  @NonNull
  public final ImageView huntClueScan;

  @NonNull
  public final TextView huntClueText;

  @NonNull
  public final TextView huntClueTitle;

  @NonNull
  public final ImageView huntFinishedImage;

  @NonNull
  public final TextView huntFinishedMessage;

  @NonNull
  public final TextView huntFinishedTitle;

  @NonNull
  public final ConstraintLayout huntLayout;

  @NonNull
  public final ImageView huntSolvedImage;

  @NonNull
  public final ImageView huntSolvedNext;

  @NonNull
  public final TextView huntSolvedTitle;

  private ActivityHuntBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView huntClueBack,
      @NonNull TextView huntClueError, @NonNull ImageView huntClueScan,
      @NonNull TextView huntClueText, @NonNull TextView huntClueTitle,
      @NonNull ImageView huntFinishedImage, @NonNull TextView huntFinishedMessage,
      @NonNull TextView huntFinishedTitle, @NonNull ConstraintLayout huntLayout,
      @NonNull ImageView huntSolvedImage, @NonNull ImageView huntSolvedNext,
      @NonNull TextView huntSolvedTitle) {
    this.rootView = rootView;
    this.huntClueBack = huntClueBack;
    this.huntClueError = huntClueError;
    this.huntClueScan = huntClueScan;
    this.huntClueText = huntClueText;
    this.huntClueTitle = huntClueTitle;
    this.huntFinishedImage = huntFinishedImage;
    this.huntFinishedMessage = huntFinishedMessage;
    this.huntFinishedTitle = huntFinishedTitle;
    this.huntLayout = huntLayout;
    this.huntSolvedImage = huntSolvedImage;
    this.huntSolvedNext = huntSolvedNext;
    this.huntSolvedTitle = huntSolvedTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityHuntBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityHuntBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_hunt, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityHuntBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.huntClueBack;
      ImageView huntClueBack = rootView.findViewById(id);
      if (huntClueBack == null) {
        break missingId;
      }

      id = R.id.huntClueError;
      TextView huntClueError = rootView.findViewById(id);
      if (huntClueError == null) {
        break missingId;
      }

      id = R.id.huntClueScan;
      ImageView huntClueScan = rootView.findViewById(id);
      if (huntClueScan == null) {
        break missingId;
      }

      id = R.id.huntClueText;
      TextView huntClueText = rootView.findViewById(id);
      if (huntClueText == null) {
        break missingId;
      }

      id = R.id.huntClueTitle;
      TextView huntClueTitle = rootView.findViewById(id);
      if (huntClueTitle == null) {
        break missingId;
      }

      id = R.id.huntFinishedImage;
      ImageView huntFinishedImage = rootView.findViewById(id);
      if (huntFinishedImage == null) {
        break missingId;
      }

      id = R.id.huntFinishedMessage;
      TextView huntFinishedMessage = rootView.findViewById(id);
      if (huntFinishedMessage == null) {
        break missingId;
      }

      id = R.id.huntFinishedTitle;
      TextView huntFinishedTitle = rootView.findViewById(id);
      if (huntFinishedTitle == null) {
        break missingId;
      }

      ConstraintLayout huntLayout = (ConstraintLayout) rootView;

      id = R.id.huntSolvedImage;
      ImageView huntSolvedImage = rootView.findViewById(id);
      if (huntSolvedImage == null) {
        break missingId;
      }

      id = R.id.huntSolvedNext;
      ImageView huntSolvedNext = rootView.findViewById(id);
      if (huntSolvedNext == null) {
        break missingId;
      }

      id = R.id.huntSolvedTitle;
      TextView huntSolvedTitle = rootView.findViewById(id);
      if (huntSolvedTitle == null) {
        break missingId;
      }

      return new ActivityHuntBinding((ConstraintLayout) rootView, huntClueBack, huntClueError,
          huntClueScan, huntClueText, huntClueTitle, huntFinishedImage, huntFinishedMessage,
          huntFinishedTitle, huntLayout, huntSolvedImage, huntSolvedNext, huntSolvedTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
